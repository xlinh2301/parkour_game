import { Vec3, RaycastResult } from 'cannon-es';
import * as THREE from 'three';

export class CharacterController {
    constructor(body, character = null, world = null) {
        this.body = body;
        this.character = character;
        this.world = world;

        // T·ªëc ƒë·ªô di chuy·ªÉn v√† l·ª±c nh·∫£y
        this.speed = 8;
        this.jumpForce = 3; // Gi·∫£m xu·ªëng 4 cho nh·∫£y nh·∫π nh√†ng h∆°n
        
        // Tr·∫°ng th√°i c√°c ph√≠m
        this.keys = {
            forward: false,
            backward: false,
            left: false,
            right: false,
            jump: false
        };
        
        // Vector ƒë·ªÉ t√≠nh to√°n di chuy·ªÉn
        this.inputVelocity = new Vec3();
        this.isOnGround = false;
        
        // Raycasting ƒë·ªÉ ki·ªÉm tra m·∫∑t ƒë·∫•t
        this.raycastResult = new RaycastResult();
        // T√≠nh chi·ªÅu cao nh√¢n v·∫≠t d·ª±a tr√™n shape ƒë·∫ßu ti√™n
        if (this.body && this.body.shapes && this.body.shapes.length > 0) {
            this.groundCheckDistance = this.body.shapes[0].halfExtents.y + 0.15; // th√™m bi√™n an to√†n 0.15
        } else {
            this.groundCheckDistance = 1.0; // fallback
        }
        this.jumpCooldown = 0; // Th√™m cooldown ƒë·ªÉ tr√°nh nh·∫£y li√™n t·ª•c

        this.setupEventListeners();
    }

    setupEventListeners() {
        document.addEventListener('keydown', (event) => this.onKeyDown(event));
        document.addEventListener('keyup', (event) => this.onKeyUp(event));
    }

    onKeyDown(event) {
        switch(event.code) {
            case 'KeyW':
            case 'ArrowUp':
                this.keys.forward = true;
                break;
            case 'KeyS':
            case 'ArrowDown':
                this.keys.backward = true;
                break;
            case 'KeyA':
            case 'ArrowLeft':
                this.keys.left = true;
                break;
            case 'KeyD':
            case 'ArrowRight':
                this.keys.right = true;
                break;
            case 'Space':
                this.keys.jump = true;
                event.preventDefault(); // NgƒÉn cu·ªôn trang
                break;
        }
    }

    onKeyUp(event) {
        switch(event.code) {
            case 'KeyW':
            case 'ArrowUp':
                this.keys.forward = false;
                break;
            case 'KeyS':
            case 'ArrowDown':
                this.keys.backward = false;
                break;
            case 'KeyA':
            case 'ArrowLeft':
                this.keys.left = false;
                break;
            case 'KeyD':
            case 'ArrowRight':
                this.keys.right = false;
                break;
            case 'Space':
                this.keys.jump = false;
                break;
        }
    }

    // Ki·ªÉm tra xem nh√¢n v·∫≠t c√≥ ƒëang ƒë·ª©ng tr√™n m·∫∑t ƒë·∫•t kh√¥ng b·∫±ng Raycasting
    checkGrounded() {
        if (!this.world) {
            this.isOnGround = false;
            return;
        }

        const start = this.body.position;
        const end = new Vec3(start.x, start.y - this.groundCheckDistance, start.z);

        // Reset v√† th·ª±c hi·ªán raycast
        this.raycastResult.reset();
        this.world.raycastClosest(start, end, {}, this.raycastResult);

        // N·∫øu tia ch·∫°m v√†o v·∫≠t g√¨ ƒë√≥ v√† v·∫≠t ƒë√≥ kh√¥ng ph·∫£i l√† ch√≠nh nh√¢n v·∫≠t
        if (this.raycastResult.hasHit && this.raycastResult.body !== this.body) {
            this.isOnGround = true;
        } else {
            this.isOnGround = false;
        }
    }

    // ƒêi·ªÅu khi·ªÉn animation d·ª±a tr√™n tr·∫°ng th√°i di chuy·ªÉn
    updateAnimation(isMoving) {
        if (!this.character) return;

        const runAction = this.character.userData.runAction;
        const idleAction = this.character.userData.idleAction;
        
        if (isMoving && !this.character.userData.isMoving) {
            // B·∫Øt ƒë·∫ßu ch·∫°y
            if (idleAction) idleAction.fadeOut(0.3);
            if (runAction) runAction.reset().fadeIn(0.3).play();
            this.character.userData.isMoving = true;
            console.log('üèÉ Starting run animation');
        } else if (!isMoving && this.character.userData.isMoving) {
            // D·ª´ng ch·∫°y, chuy·ªÉn v·ªÅ idle
            if (runAction) runAction.fadeOut(0.3);
            if (idleAction) idleAction.reset().fadeIn(0.3).play();
            this.character.userData.isMoving = false;
            console.log('üßç Starting idle animation');
        }
    }

    update(cameraRotationY, deltaTime) {
        this.checkGrounded();
        
        // Gi·∫£m jump cooldown
        if (this.jumpCooldown > 0) {
            this.jumpCooldown -= deltaTime;
        }

        // T√≠nh to√°n h∆∞·ªõng di chuy·ªÉn d·ª±a tr√™n input
        const direction = new THREE.Vector3(0, 0, 0);
        
        if (this.keys.forward) direction.z += 1;  // Forward = h∆∞·ªõng d∆∞∆°ng Z
        if (this.keys.backward) direction.z -= 1; // Backward = h∆∞·ªõng √¢m Z  
        if (this.keys.left) direction.x += 1;     // Left = h∆∞·ªõng √¢m X
        if (this.keys.right) direction.x -= 1;    // Right = h∆∞·ªõng d∆∞∆°ng X

        // Ki·ªÉm tra xem c√≥ ƒëang di chuy·ªÉn kh√¥ng TR∆Ø·ªöC khi normalize
        const isMoving = direction.length() > 0;

        // Normalize ƒë·ªÉ tr√°nh di chuy·ªÉn nhanh h∆°n khi nh·∫•n 2 ph√≠m
        if (isMoving) {
            direction.normalize();
        }

        // Xoay h∆∞·ªõng di chuy·ªÉn theo h∆∞·ªõng c·ªßa camera (ch·ªâ tr·ª•c Y)
        direction.applyAxisAngle(new THREE.Vector3(0, 1, 0), cameraRotationY);

        if (this.keys.jump && this.isOnGround && this.jumpCooldown <= 0) {
            this.body.velocity.y = this.jumpForce;
            this.isOnGround = false;
            this.jumpCooldown = 0.3;
            console.log(`ü¶ò Jump! Initial momentum: (${this.body.velocity.x.toFixed(1)}, ${this.body.velocity.z.toFixed(1)})`);
        }
        
        const airControlFactor = 0.05; // T·ªâ l·ªá ƒëi·ªÅu khi·ªÉn tr√™n kh√¥ng (c√†ng nh·ªè c√†ng √≠t "tr√¥i")
        const airSpeedMultiplier = 0.5; // T·ªëc ƒë·ªô t·ªëi ƒëa tr√™n kh√¥ng (so v·ªõi m·∫∑t ƒë·∫•t)

        if (this.isOnGround) {
            // Tr√™n m·∫∑t ƒë·∫•t: ƒëi·ªÅu khi·ªÉn tr·ª±c ti·∫øp
            this.body.velocity.x = direction.x * this.speed;
            this.body.velocity.z = direction.z * this.speed;
        } else {
            // Tr√™n kh√¥ng: ƒëi·ªÅu khi·ªÉn h·∫°n ch·∫ø v√† c√≥ "ma s√°t" kh√¥ng kh√≠
            const targetVelocityX = direction.x * this.speed * airSpeedMultiplier;
            const targetVelocityZ = direction.z * this.speed * airSpeedMultiplier;
            this.body.velocity.x = THREE.MathUtils.lerp(this.body.velocity.x, targetVelocityX, airControlFactor);
            this.body.velocity.z = THREE.MathUtils.lerp(this.body.velocity.z, targetVelocityZ, airControlFactor);
        }

        // ƒêi·ªÅu khi·ªÉn animation
        this.updateAnimation(isMoving);

        // Debug info: Log khi di chuy·ªÉn ho·∫∑c ·ªü tr√™n kh√¥ng
        if (isMoving || !this.isOnGround) {
            const status = this.isOnGround ? "on ground" : "in air";
            console.log(`üèÉ State [${status}]: velocity(${this.body.velocity.x.toFixed(1)}, ${this.body.velocity.y.toFixed(1)}, ${this.body.velocity.z.toFixed(1)})`);
        }
    }

    // Cleanup event listeners khi kh√¥ng c·∫ßn n·ªØa
    destroy() {
        document.removeEventListener('keydown', this.onKeyDown);
        document.removeEventListener('keyup', this.onKeyUp);
    }
} 