import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import * as THREE from 'three';

export function loadCharacter(scene) {
  return new Promise((resolve) => {
    const loader = new GLTFLoader();
    loader.load('models/character/luoli_run.glb', (gltf) => {
      const character = gltf.scene;
      // Gi·∫£m k√≠ch th∆∞·ªõc nh√¢n v·∫≠t nh·ªè h∆°n ƒë·ªÉ ph√π h·ª£p t·ªâ l·ªá th·∫ø gi·ªõi
      character.scale.set(0.001, 0.001, 0.001);
      character.position.set(0, 5, 0);
      scene.add(character);
      resolve(character);
    });
  });
}

export function loadCharacterWithPhysics(scene, physicsWorld) {
  return new Promise((resolve) => {
    const loader = new GLTFLoader();
    loader.load('models/character/luoli_run.glb', (gltf) => {
      const character = gltf.scene;
      // Gi·∫£m k√≠ch th∆∞·ªõc nh√¢n v·∫≠t nh·ªè h∆°n ƒë·ªÉ ph√π h·ª£p t·ªâ l·ªá th·∫ø gi·ªõi
      character.scale.set(0.002, 0.002, 0.002);
      character.position.set(0, 2, 0); // Spawn v·ª´a ph·∫£i, r∆°i xu·ªëng ground plane
      
      // T·∫°o AnimationMixer cho character
      const mixer = new THREE.AnimationMixer(character);
      
      // Log t·∫•t c·∫£ animations c√≥ s·∫µn
      console.log('Available animations:', gltf.animations.map(clip => clip.name));
      
      // T√¨m v√† ph√°t animation ch·∫°y
      let runAction = null;
      let idleAction = null;
      
      gltf.animations.forEach((clip) => {
        const action = mixer.clipAction(clip);
        console.log('Animation clip:', clip.name);
        
        // T√¨m animation ch·∫°y (c√≥ th·ªÉ c√≥ t√™n kh√°c nhau)
        if (clip.name.toLowerCase().includes('run') || 
            clip.name.toLowerCase().includes('walk') ||
            clip.name.toLowerCase().includes('jog')) {
          runAction = action;
          console.log('üèÉ Found run animation:', clip.name);
        }
        
        // T√¨m animation ƒë·ª©ng y√™n
        if (clip.name.toLowerCase().includes('idle') || 
            clip.name.toLowerCase().includes('stand')) {
          idleAction = action;
          console.log('üßç Found idle animation:', clip.name);
        }
      });
      
      // N·∫øu kh√¥ng t√¨m th·∫•y animation c·ª• th·ªÉ, ph√°t animation ƒë·∫ßu ti√™n
      if (!runAction && gltf.animations.length > 0) {
        runAction = mixer.clipAction(gltf.animations[0]);
        console.log('üé¨ Using first animation as run:', gltf.animations[0].name);
      }
      
      // Ph√°t animation idle m·∫∑c ƒë·ªãnh
      if (idleAction) {
        idleAction.play();
      }
      
      // Enable shadows cho character   
      character.traverse((child) => {
        if (child.isMesh) {
          child.castShadow = true;
          child.receiveShadow = true;
        }
      });
      
      scene.add(character);
      
      // T·∫°o physics body d·ª±a tr√™n mesh th·ª±c t·∫ø (k√≠ch th∆∞·ªõc kh·ªõp bounding box)
      const characterBody = physicsWorld.createDynamicBoxFromMesh(character, {
        mass: 1,
        fixedRotation: true,
        shrinkXZ: 0.5,
        shrinkY: 0.9
      });
      
      // L∆∞u reference
      character.userData.physicsBody = characterBody;
      character.userData.mixer = mixer;
      character.userData.runAction = runAction;
      character.userData.idleAction = idleAction;
      character.userData.isMoving = false;
      
      // Debug: log collisions
      characterBody.addEventListener('collide', (event) => {
        const other = event.body;
        console.log(`ü§ù Character collided with body id=${other.id}, meshName=${other.meshName || 'N/A'}`);
      });
      
      console.log('‚úÖ Character loaded with physics and animations!');
      
      resolve({
        mesh: character,
        body: characterBody,
        mixer: mixer,
        runAction: runAction,
        idleAction: idleAction
      });
    });
  });
} 